1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
* a0~a7, and 13 is held in a2 register.

2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
* In the assembly code for main, it don't directly call function f. Compiler inline functions f and g.

3. At what address is the function printf located?
* ra+1592, which equals to 0x628.
auipc指令（add upper immediate to pc）将立即数左移12位，和PC相加存入目的寄存器。
auipc ra, 0x0 将pc的值写入ra寄存器
jalr rd, offset(base)指令( jump and link register)将PC+4写入链接寄存器rd(默认是$ra)，pc跳转到base+sign-extend(offset)
jalr 1592(ra)将下一个指令的地址写入ra寄存器作为返回地址，同时跳转至ra+1592

4. What value is in the register ra just after the jalr to printf in main?
* 0x38
jalr指令将PC+4保存在$ra

5. Run the following code.
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
Here's a description of little- and big-endian and a more whimsical description.
* THe output is "He110 WOrld"
* [0x00646c72]_16 is [0110 0100 0110 1100 0111 0010]_2, and r is [0111 0010]_2, l is [0110 1100]_2, d is [0110 0100]_2
* [57616]_10 is [e110]_16, and %x 输出十六进制值
The output depends on that fact that the RISC-V is little-endian

6. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
	printf("x=%d y=%d", 3);
* x=3 y=0, because 3 is in register a1, and 0 is in register a2.