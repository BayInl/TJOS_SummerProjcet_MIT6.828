1. 哪些寄存器保存函数的参数？例如，在`main`对`printf`的调用中，哪个寄存器保存13？
- a0~a7寄存器保存函数的参数；在main函数中调用printf时，a2寄存器保存了13
2. 在main函数的汇编代码中，调用函数f和g的位置在哪里？（提示：编译器可能会内联函数。）
- 在main函数的汇编代码中，没有直接调用函数f。编译器将函数f和g内联了
3. 函数printf的地址是多少？
- ra+1592，也就是0x628。 auipc指令（add upper immediate to pc）将立即数左移12位，和PC相加存入目的寄存器。 auipc ra, 0x0 将pc的值写入ra寄存器 jalr rd, offset(base)指令( jump and link register)将PC+4写入链接寄存器rd(默认是$ra)，pc跳转到base+sign-extend(offset) jalr 1592(ra)将下一个指令的地址写入ra寄存器作为返回地址，同时跳转至ra+1592
4. 在main函数中调用printf后，寄存器ra中的值是多少？
- 0x38 jalr指令将PC+4保存在$ra
5. 运行以下代码。 unsigned int i = 0x00646c72; printf(“H%x Wo%s”, 57616, &i); 输出是什么？
- 输出是"He110 WOrld"
- [0x00646c72]_16 是 [0110 0100 0110 1100 0111 0010]_2，而 r 是 [0111 0010]_2，l 是 [0110 1100]_2，d 是 [0110 0100]_2
- [57616]_10 是 [e110]_16，而 %x 输出十六进制值 输出取决于RISC-V是小端模式
6. 在以下代码中，在’y='后面会打印什么？（注意：答案不是一个具体的值。）为什么会这样？ printf(“x=%d y=%d”, 3);
- x=3 y=0，因为3在a1寄存器中，而0在a2寄存器中。